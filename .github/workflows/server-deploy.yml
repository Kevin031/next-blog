name: Server Deploy

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: server

    env:
      IMAGE_NAME: ccr.ccs.tencentyun.com/kevinlau/blog-server:latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Create .env.prod file from GitHub Secrets
        run: |
          echo "NODE_ENV=production" >> .env
          echo "DB_HOST=${{ secrets.SERVER_HOST }}" >> .env
          echo "DB_PORT=3306" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWD=${{ secrets.DB_PASSWD }}" >> .env
          echo "DB_DATABASE=blog" >> .env

      - name: Build Docker Image
        run: |
          # 构建多架构镜像以提高兼容性
          docker build -t $IMAGE_NAME .
          # 压缩镜像层以减少推送时间
          docker image prune -f

      - name: Login to Tencent Cloud
        run: |
          # 登录重试机制
          for i in {1..3}; do
            echo "尝试登录腾讯云容器镜像仓库 (第 $i 次)"
            if echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin ccr.ccs.tencentyun.com; then
              echo "登录成功"
              break
            else
              echo "第 $i 次登录失败，等待 10 秒后重试..."
              sleep 10
            fi
          done

      - name: Push Docker Image with retry
        run: |
          # 设置重试机制，最多重试3次
          for i in {1..3}; do
            echo "尝试推送镜像 (第 $i 次)"
            if timeout 600 docker push $IMAGE_NAME; then
              echo "镜像推送成功"
              exit 0
            else
              echo "第 $i 次推送失败，等待 30 秒后重试..."
              sleep 30
            fi
          done
          echo "镜像推送失败，已重试 3 次"
          exit 1

  deploy:
    runs-on: ubuntu-latest
    needs: build

    env:
      IMAGE_NAME: ccr.ccs.tencentyun.com/kevinlau/blog-server:latest

    steps:
      - name: SSH to server and deploy
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            docker login --username ${{ secrets.DOCKER_USERNAME }} --password ${{ secrets.DOCKER_PASSWORD }} ccr.ccs.tencentyun.com
            docker pull $IMAGE_NAME
            docker ps -q --filter "name=blog-server" | grep -q . && docker stop blog-server || echo "Container blog-server is not running"
            docker ps -a -q --filter "name=blog-server" | grep -q . && docker rm blog-server || echo "Container blog-server does not exist"
            docker run -d --name blog-server -p 3000:20238 $IMAGE_NAME
